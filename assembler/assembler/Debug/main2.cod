; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

	TITLE	C:\Users\PhonkX\documents\visual studio 2015\Projects\assembler\assembler\main2.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	?f@@YAHHH@Z					; f
PUBLIC	?fact@@YAHH@Z					; fact
PUBLIC	?reverse@@YAXPAHH@Z				; reverse
PUBLIC	_main
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 141  : 			{	// test if stream state okay

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 142  : 			return (_Ok);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 143  : 			}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 130  : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 131  :  #if _HAS_EXCEPTIONS
; 132  : 			if (!_XSTD uncaught_exception())

  00042	8b f4		 mov	 esi, esp
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	75 14		 jne	 SHORT $LN1@sentry

; 133  : 				this->_Myostr._Osfx();

  00058	8b f4		 mov	 esi, esp
  0005a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 134  : 
; 135  :  #else /* _HAS_EXCEPTIONS */
; 136  : 			this->_Myostr._Osfx();
; 137  :  #endif /* _HAS_EXCEPTIONS */
; 138  : 			}

  0006c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 123  : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 122  : 			: _Sentry_base(_Ostr)

  00042	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00045	50		 push	 eax
  00046	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 124  : 			if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)

  00055	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0005d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00060	8b f4		 mov	 esi, esp
  00062	8b ca		 mov	 ecx, edx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	0f b6 c0	 movzx	 eax, al
  00074	85 c0		 test	 eax, eax
  00076	74 6e		 je	 SHORT $LN2@sentry
  00078	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00080	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00083	8b f4		 mov	 esi, esp
  00085	8b ca		 mov	 ecx, edx
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0008d	3b f4		 cmp	 esi, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	85 c0		 test	 eax, eax
  00096	74 4e		 je	 SHORT $LN2@sentry
  00098	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0009b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000a0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000a3	8b f4		 mov	 esi, esp
  000a5	8b ca		 mov	 ecx, edx
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b7	74 2d		 je	 SHORT $LN2@sentry

; 125  : 				_Ostr.tie()->flush();

  000b9	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000be	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000c1	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000c4	8b f4		 mov	 esi, esp
  000c6	8b ca		 mov	 ecx, edx
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000ce	3b f4		 cmp	 esi, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d5	8b f4		 mov	 esi, esp
  000d7	8b c8		 mov	 ecx, eax
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000df	3b f4		 cmp	 esi, esp
  000e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@sentry:

; 126  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  000e6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000eb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ee	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000f1	8b f4		 mov	 esi, esp
  000f3	8b ca		 mov	 ecx, edx
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000fb	3b f4		 cmp	 esi, esp
  000fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00102	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 127  : 			}

  00108	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0010f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00112	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00115	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011c	59		 pop	 ecx
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00126	3b ec		 cmp	 ebp, esp
  00128	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -224						; size = 4
tv86 = -220						; size = 4
tv72 = -220						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 106  : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00021	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 107  : 			if (_Myostr.rdbuf() != 0)

  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  0004d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  0005b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0005e	8b f4		 mov	 esi, esp
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00066	3b f4		 cmp	 esi, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	85 c0		 test	 eax, eax
  0006f	74 4d		 je	 SHORT $LN3@Sentry_bas

; 108  : 				_Myostr.rdbuf()->_Unlock();

  00071	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv86[ebp], ecx
  0007c	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv86[ebp]
  00082	8b 02		 mov	 eax, DWORD PTR [edx]
  00084	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv86[ebp]
  0008a	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0008d	8b f4		 mov	 esi, esp
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv92[ebp], eax
  000a2	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000aa	8b f4		 mov	 esi, esp
  000ac	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000b2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000b5	ff d0		 call	 eax
  000b7	3b f4		 cmp	 esi, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 109  : 			}

  000be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c8	59		 pop	 ecx
  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 1c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-228]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -212						; size = 4
tv87 = -208						; size = 4
tv73 = -208						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 100  : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-212]
  00013	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 			: _Myostr(_Ostr)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx

; 101  : 			if (_Myostr.rdbuf() != 0)

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  00036	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  00044	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00047	8b f4		 mov	 esi, esp
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	85 c0		 test	 eax, eax
  00058	74 4d		 je	 SHORT $LN1@Sentry_bas

; 102  : 				_Myostr.rdbuf()->_Lock();

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv87[ebp], ecx
  00065	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv87[ebp]
  0006b	8b 02		 mov	 eax, DWORD PTR [edx]
  0006d	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv87[ebp]
  00073	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00076	8b f4		 mov	 esi, esp
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv93[ebp], eax
  0008b	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  00091	8b 11		 mov	 edx, DWORD PTR [ecx]
  00093	8b f4		 mov	 esi, esp
  00095	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  0009b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0009e	ff d0		 call	 eax
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 103  : 			}

  000a7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 993  : 	{	// insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 994  : 	_Ostr.put(_Ostr.widen('\n'));

  0001e	8b f4		 mov	 esi, esp
  00020	6a 0a		 push	 10			; 0000000aH
  00022	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0002a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0002d	8b ca		 mov	 ecx, edx
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b f4		 mov	 esi, esp
  0003e	0f b6 c0	 movzx	 eax, al
  00041	50		 push	 eax
  00042	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  0004b	3b f4		 cmp	 esi, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 995  : 	_Ostr.flush();

  00052	8b f4		 mov	 esi, esp
  00054	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 996  : 	return (_Ostr);

  00064	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 997  : 	}

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
_TEXT	SEGMENT
tv128 = -356						; size = 8
tv279 = -352						; size = 4
tv274 = -352						; size = 4
tv313 = -348						; size = 8
tv278 = -348						; size = 4
tv276 = -348						; size = 4
tv273 = -348						; size = 4
tv275 = -344						; size = 4
tv65 = -344						; size = 4
tv277 = -341						; size = 1
tv272 = -341						; size = 1
$T2 = -336						; size = 4
$T3 = -324						; size = 4
$T4 = -312						; size = 4
$T5 = -300						; size = 4
$T6 = -288						; size = 4
$T7 = -276						; size = 4
$T8 = -264						; size = 4
__Pad$9 = -60						; size = 8
__Ok$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Ch$ = 12						; size = 1
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 828  : 	{	// insert a char into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 9c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-356]
  00021	b9 55 00 00 00	 mov	 ecx, 85			; 00000055H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 829  : 	typedef char _Elem;
; 830  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 831  : 	ios_base::iostate _State = ios_base::goodbit;

  00044	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 832  : 	const typename _Myos::sentry _Ok(_Ostr);

  0004b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004e	50		 push	 eax
  0004f	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00052	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00057	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 833  : 
; 834  : 	if (_Ok)

  0005e	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00061	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00066	0f b6 c0	 movzx	 eax, al
  00069	85 c0		 test	 eax, eax
  0006b	0f 84 3a 03 00
	00		 je	 $LN8@operator

; 835  : 		{	// state okay, insert
; 836  : 		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  00071	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00079	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0007c	8b f4		 mov	 esi, esp
  0007e	8b ca		 mov	 ecx, edx
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv313[ebp], eax
  00093	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv313[ebp+4], edx
  00099	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR tv313[ebp+4], 0
  000a0	7f 18		 jg	 SHORT $LN15@operator
  000a2	7c 09		 jl	 SHORT $LN22@operator
  000a4	83 bd a4 fe ff
	ff 01		 cmp	 DWORD PTR tv313[ebp], 1
  000ab	77 0d		 ja	 SHORT $LN15@operator
$LN22@operator:
  000ad	0f 57 c0	 xorps	 xmm0, xmm0
  000b0	66 0f 13 85 9c
	fe ff ff	 movlpd	 QWORD PTR tv128[ebp], xmm0
  000b8	eb 2e		 jmp	 SHORT $LN16@operator
$LN15@operator:
  000ba	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bf	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000c2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000c5	8b f4		 mov	 esi, esp
  000c7	8b ca		 mov	 ecx, edx
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000cf	3b f4		 cmp	 esi, esp
  000d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d6	83 e8 01	 sub	 eax, 1
  000d9	83 da 00	 sbb	 edx, 0
  000dc	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv128[ebp], eax
  000e2	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv128[ebp+4], edx
$LN16@operator:
  000e8	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv128[ebp]
  000ee	89 45 c4	 mov	 DWORD PTR __Pad$9[ebp], eax
  000f1	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv128[ebp+4]
  000f7	89 4d c8	 mov	 DWORD PTR __Pad$9[ebp+4], ecx

; 837  : 
; 838  : 		_TRY_IO_BEGIN

  000fa	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 839  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  000fe	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00101	8b 08		 mov	 ecx, DWORD PTR [eax]
  00103	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00106	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00109	8b f4		 mov	 esi, esp
  0010b	8b ca		 mov	 ecx, edx
  0010d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00113	3b f4		 cmp	 esi, esp
  00115	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011a	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00120	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv65[ebp]
  00126	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0012b	83 f8 40	 cmp	 eax, 64			; 00000040H
  0012e	0f 84 dd 00 00
	00		 je	 $LN10@operator

; 840  : 			for (; _State == ios_base::goodbit && 0 < _Pad;

  00134	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:

; 841  : 				--_Pad)	// pad on left

  00136	8b 45 c4	 mov	 eax, DWORD PTR __Pad$9[ebp]
  00139	83 e8 01	 sub	 eax, 1
  0013c	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$9[ebp+4]
  0013f	83 d9 00	 sbb	 ecx, 0
  00142	89 45 c4	 mov	 DWORD PTR __Pad$9[ebp], eax
  00145	89 4d c8	 mov	 DWORD PTR __Pad$9[ebp+4], ecx
$LN4@operator:

; 840  : 			for (; _State == ios_base::goodbit && 0 < _Pad;

  00148	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  0014c	0f 85 bf 00 00
	00		 jne	 $LN10@operator
  00152	83 7d c8 00	 cmp	 DWORD PTR __Pad$9[ebp+4], 0
  00156	0f 8c b5 00 00
	00		 jl	 $LN10@operator
  0015c	7f 0a		 jg	 SHORT $LN23@operator
  0015e	83 7d c4 00	 cmp	 DWORD PTR __Pad$9[ebp], 0
  00162	0f 86 a9 00 00
	00		 jbe	 $LN10@operator
$LN23@operator:

; 842  : 				if (_Traits::eq_int_type(_Traits::eof(),

  00168	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0016b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00170	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00173	8b f4		 mov	 esi, esp
  00175	8b ca		 mov	 ecx, edx
  00177	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  0017d	3b f4		 cmp	 esi, esp
  0017f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00184	88 85 ab fe ff
	ff		 mov	 BYTE PTR tv272[ebp], al
  0018a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0018d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018f	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00192	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00195	8b f4		 mov	 esi, esp
  00197	8b ca		 mov	 ecx, edx
  00199	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0019f	3b f4		 cmp	 esi, esp
  001a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a6	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv273[ebp], eax
  001ac	8b f4		 mov	 esi, esp
  001ae	0f b6 85 ab fe
	ff ff		 movzx	 eax, BYTE PTR tv272[ebp]
  001b5	50		 push	 eax
  001b6	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv273[ebp]
  001bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  001c2	3b f4		 cmp	 esi, esp
  001c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c9	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv274[ebp], eax
  001cf	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv274[ebp]
  001d5	89 8d f8 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], ecx
  001db	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  001e0	89 85 ec fe ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  001e6	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR $T8[ebp]
  001ec	52		 push	 edx
  001ed	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  001f3	50		 push	 eax
  001f4	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  001f9	83 c4 08	 add	 esp, 8
  001fc	0f b6 c8	 movzx	 ecx, al
  001ff	85 c9		 test	 ecx, ecx
  00201	74 09		 je	 SHORT $LN11@operator

; 843  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 844  : 					_State |= ios_base::badbit;

  00203	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00206	83 c8 04	 or	 eax, 4
  00209	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN11@operator:

; 845  : 
; 846  : 		if (_State == ios_base::goodbit

  0020c	e9 25 ff ff ff	 jmp	 $LN2@operator
$LN10@operator:

; 847  : 			&& _Traits::eq_int_type(_Traits::eof(),

  00211	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00215	75 7f		 jne	 SHORT $LN12@operator
  00217	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0021a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0021c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0021f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00222	8b f4		 mov	 esi, esp
  00224	8b ca		 mov	 ecx, edx
  00226	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0022c	3b f4		 cmp	 esi, esp
  0022e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00233	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv275[ebp], eax
  00239	8b f4		 mov	 esi, esp
  0023b	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0023f	50		 push	 eax
  00240	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv275[ebp]
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0024c	3b f4		 cmp	 esi, esp
  0024e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00253	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv276[ebp], eax
  00259	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv276[ebp]
  0025f	89 8d e0 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  00265	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0026a	89 85 d4 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00270	8d 95 e0 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00276	52		 push	 edx
  00277	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0027d	50		 push	 eax
  0027e	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00283	83 c4 08	 add	 esp, 8
  00286	0f b6 c8	 movzx	 ecx, al
  00289	85 c9		 test	 ecx, ecx
  0028b	74 09		 je	 SHORT $LN12@operator

; 848  : 				_Ostr.rdbuf()->sputc(_Ch)))
; 849  : 			_State |= ios_base::badbit;

  0028d	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00290	83 c8 04	 or	 eax, 4
  00293	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN12@operator:

; 850  : 
; 851  : 		for (; _State == ios_base::goodbit && 0 < _Pad;

  00296	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:

; 852  : 			--_Pad)	// pad on right

  00298	8b 45 c4	 mov	 eax, DWORD PTR __Pad$9[ebp]
  0029b	83 e8 01	 sub	 eax, 1
  0029e	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$9[ebp+4]
  002a1	83 d9 00	 sbb	 ecx, 0
  002a4	89 45 c4	 mov	 DWORD PTR __Pad$9[ebp], eax
  002a7	89 4d c8	 mov	 DWORD PTR __Pad$9[ebp+4], ecx
$LN7@operator:

; 850  : 
; 851  : 		for (; _State == ios_base::goodbit && 0 < _Pad;

  002aa	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002ae	0f 85 bf 00 00
	00		 jne	 $LN6@operator
  002b4	83 7d c8 00	 cmp	 DWORD PTR __Pad$9[ebp+4], 0
  002b8	0f 8c b5 00 00
	00		 jl	 $LN6@operator
  002be	7f 0a		 jg	 SHORT $LN24@operator
  002c0	83 7d c4 00	 cmp	 DWORD PTR __Pad$9[ebp], 0
  002c4	0f 86 a9 00 00
	00		 jbe	 $LN6@operator
$LN24@operator:

; 853  : 			if (_Traits::eq_int_type(_Traits::eof(),

  002ca	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  002cf	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002d2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002d5	8b f4		 mov	 esi, esp
  002d7	8b ca		 mov	 ecx, edx
  002d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  002df	3b f4		 cmp	 esi, esp
  002e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e6	88 85 ab fe ff
	ff		 mov	 BYTE PTR tv277[ebp], al
  002ec	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f1	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002f4	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002f7	8b f4		 mov	 esi, esp
  002f9	8b ca		 mov	 ecx, edx
  002fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00301	3b f4		 cmp	 esi, esp
  00303	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00308	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv278[ebp], eax
  0030e	8b f4		 mov	 esi, esp
  00310	0f b6 85 ab fe
	ff ff		 movzx	 eax, BYTE PTR tv277[ebp]
  00317	50		 push	 eax
  00318	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv278[ebp]
  0031e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00324	3b f4		 cmp	 esi, esp
  00326	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0032b	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv279[ebp], eax
  00331	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv279[ebp]
  00337	89 8d c8 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  0033d	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00342	89 85 bc fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00348	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0034e	52		 push	 edx
  0034f	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00355	50		 push	 eax
  00356	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0035b	83 c4 08	 add	 esp, 8
  0035e	0f b6 c8	 movzx	 ecx, al
  00361	85 c9		 test	 ecx, ecx
  00363	74 09		 je	 SHORT $LN13@operator

; 854  : 				_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 855  : 				_State |= ios_base::badbit;

  00365	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00368	83 c8 04	 or	 eax, 4
  0036b	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 856  : 		_CATCH_IO_(_Ostr)

  0036e	e9 25 ff ff ff	 jmp	 $LN5@operator
$LN6@operator:
  00373	eb 26		 jmp	 SHORT $LN17@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0:
  00375	8b f4		 mov	 esi, esp
  00377	6a 01		 push	 1
  00379	6a 04		 push	 4
  0037b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0037e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00380	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00383	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00386	8b ca		 mov	 ecx, edx
  00388	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0038e	3b f4		 cmp	 esi, esp
  00390	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00395	b8 00 00 00 00	 mov	 eax, $LN21@operator
  0039a	c3		 ret	 0
$LN17@operator:
  0039b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  003a2	eb 07		 jmp	 SHORT $LN8@operator
$LN21@operator:
  003a4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN8@operator:

; 857  : 		}
; 858  : 
; 859  : 	_Ostr.width(0);

  003ab	8b f4		 mov	 esi, esp
  003ad	6a 00		 push	 0
  003af	6a 00		 push	 0
  003b1	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  003b6	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003b9	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003bc	8b ca		 mov	 ecx, edx
  003be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003c4	3b f4		 cmp	 esi, esp
  003c6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 860  : 	_Ostr.setstate(_State);

  003cb	8b f4		 mov	 esi, esp
  003cd	6a 00		 push	 0
  003cf	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003d2	50		 push	 eax
  003d3	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003d6	8b 11		 mov	 edx, DWORD PTR [ecx]
  003d8	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003db	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003e4	3b f4		 cmp	 esi, esp
  003e6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 861  : 	return (_Ostr);

  003eb	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003ee	89 85 b0 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  003f4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  003fb	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  003fe	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00403	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 862  : 	}

  00409	52		 push	 edx
  0040a	8b cd		 mov	 ecx, ebp
  0040c	50		 push	 eax
  0040d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN28@operator
  00413	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00418	58		 pop	 eax
  00419	5a		 pop	 edx
  0041a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0041d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00424	59		 pop	 ecx
  00425	5f		 pop	 edi
  00426	5e		 pop	 esi
  00427	5b		 pop	 ebx
  00428	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0042b	33 cd		 xor	 ecx, ebp
  0042d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00432	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  00438	3b ec		 cmp	 ebp, esp
  0043a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0043f	8b e5		 mov	 esp, ebp
  00441	5d		 pop	 ebp
  00442	c3		 ret	 0
  00443	90		 npad	 1
$LN28@operator:
  00444	01 00 00 00	 DD	 1
  00448	00 00 00 00	 DD	 $LN27@operator
$LN27@operator:
  0044c	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00450	08 00 00 00	 DD	 8
  00454	00 00 00 00	 DD	 $LN25@operator
$LN25@operator:
  00458	5f		 DB	 95			; 0000005fH
  00459	4f		 DB	 79			; 0000004fH
  0045a	6b		 DB	 107			; 0000006bH
  0045b	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\phonkx\documents\visual studio 2015\projects\assembler\assembler\main2.cpp
;	COMDAT _main
_TEXT	SEGMENT
_i$1 = -60						; size = 4
_a$ = -48						; size = 28
_n$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 75   : int main() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00012	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 76   : 
; 77   : 	int n;
; 78   : 
; 79   : 	/*__asm {
; 80   : 		push 2
; 81   : 		push 1
; 82   : 		call f
; 83   : 		add esp, 8
; 84   : 		mov n, eax
; 85   : 	}*/
; 86   : 
; 87   : 	/*__asm {
; 88   : 	push 5
; 89   : 	call fact
; 90   : 	add esp, 4
; 91   : 	mov n, eax
; 92   : 	}*/
; 93   : 
; 94   : 	int a[7] = { 0, 1, 2, 3, 4, 5, 6 };

  00028	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _a$[ebp], 0
  0002f	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _a$[ebp+4], 1
  00036	c7 45 d8 02 00
	00 00		 mov	 DWORD PTR _a$[ebp+8], 2
  0003d	c7 45 dc 03 00
	00 00		 mov	 DWORD PTR _a$[ebp+12], 3
  00044	c7 45 e0 04 00
	00 00		 mov	 DWORD PTR _a$[ebp+16], 4
  0004b	c7 45 e4 05 00
	00 00		 mov	 DWORD PTR _a$[ebp+20], 5
  00052	c7 45 e8 06 00
	00 00		 mov	 DWORD PTR _a$[ebp+24], 6

; 95   : 	n = 7;

  00059	c7 45 f4 07 00
	00 00		 mov	 DWORD PTR _n$[ebp], 7

; 96   : 	__asm {
; 97   : 	push 7

  00060	6a 07		 push	 7

; 98   : 	lea eax, a

  00062	8d 45 d0	 lea	 eax, DWORD PTR _a$[ebp]

; 99   : 	push eax

  00065	50		 push	 eax

; 100  : 	call reverse

  00066	e8 00 00 00 00	 call	 ?reverse@@YAXPAHH@Z	; reverse

; 101  : 	add esp, 8

  0006b	83 c4 08	 add	 esp, 8

; 102  : 	}
; 103  : 	//cout << n << endl;
; 104  : 	for (int i = 0; i < n; ++i) {

  0006e	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00075	eb 09		 jmp	 SHORT $LN4@main
$LN2@main:
  00077	8b 45 c4	 mov	 eax, DWORD PTR _i$1[ebp]
  0007a	83 c0 01	 add	 eax, 1
  0007d	89 45 c4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@main:
  00080	8b 45 c4	 mov	 eax, DWORD PTR _i$1[ebp]
  00083	3b 45 f4	 cmp	 eax, DWORD PTR _n$[ebp]
  00086	7d 2a		 jge	 SHORT $LN3@main

; 105  : 		cout << a[i] << ' ';

  00088	6a 20		 push	 32			; 00000020H
  0008a	8b f4		 mov	 esi, esp
  0008c	8b 45 c4	 mov	 eax, DWORD PTR _i$1[ebp]
  0008f	8b 4c 85 d0	 mov	 ecx, DWORD PTR _a$[ebp+eax*4]
  00093	51		 push	 ecx
  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
  000ad	83 c4 08	 add	 esp, 8

; 106  : 	}

  000b0	eb c5		 jmp	 SHORT $LN2@main
$LN3@main:

; 107  : 	cout << endl;

  000b2	8b f4		 mov	 esi, esp
  000b4	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000c5	3b f4		 cmp	 esi, esp
  000c7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 108  : 	return 0;

  000cc	33 c0		 xor	 eax, eax

; 109  : }

  000ce	52		 push	 edx
  000cf	8b cd		 mov	 ecx, ebp
  000d1	50		 push	 eax
  000d2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@main
  000d8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000dd	58		 pop	 eax
  000de	5a		 pop	 edx
  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx
  000e2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e5	33 cd		 xor	 ecx, ebp
  000e7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ec	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  000f2	3b ec		 cmp	 ebp, esp
  000f4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
  000fd	0f 1f 00	 npad	 3
$LN8@main:
  00100	01 00 00 00	 DD	 1
  00104	00 00 00 00	 DD	 $LN7@main
$LN7@main:
  00108	d0 ff ff ff	 DD	 -48			; ffffffd0H
  0010c	1c 00 00 00	 DD	 28			; 0000001cH
  00110	00 00 00 00	 DD	 $LN6@main
$LN6@main:
  00114	61		 DB	 97			; 00000061H
  00115	00		 DB	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\phonkx\documents\visual studio 2015\projects\assembler\assembler\main2.cpp
;	COMDAT ?reverse@@YAXPAHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_n$ = 12						; size = 4
?reverse@@YAXPAHH@Z PROC				; reverse, COMDAT

; 46   : 
; 47   : 	__asm {
; 48   : 
; 49   : 		push ebp

  00000	55		 push	 ebp

; 50   : 		mov ebp, esp

  00001	8b ec		 mov	 ebp, esp

; 51   : 
; 52   : 		mov esi, [ebp + 8]

  00003	8b 75 08	 mov	 esi, DWORD PTR [ebp+8]

; 53   : 		mov edi, [ebp + 12]

  00006	8b 7d 0c	 mov	 edi, DWORD PTR [ebp+12]

; 54   : 		dec edi

  00009	4f		 dec	 edi

; 55   : 		shl edi, 2

  0000a	c1 e7 02	 shl	 edi, 2

; 56   : 		add edi, esi

  0000d	03 fe		 add	 edi, esi
$L2$3:

; 57   : 
; 58   : L2:		cmp esi, edi

  0000f	3b f7		 cmp	 esi, edi

; 59   : 		jae L1

  00011	73 10		 jae	 SHORT $L1$4

; 60   : 
; 61   : 		mov eax, [esi]

  00013	8b 06		 mov	 eax, DWORD PTR [esi]

; 62   : 		mov ebx, [edi]

  00015	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 63   : 		mov [edi], eax

  00017	89 07		 mov	 DWORD PTR [edi], eax

; 64   : 		mov [esi], ebx

  00019	89 1e		 mov	 DWORD PTR [esi], ebx

; 65   : 		add esi, 4

  0001b	83 c6 04	 add	 esi, 4

; 66   : 		sub edi, 4

  0001e	83 ef 04	 sub	 edi, 4

; 67   : 		jmp L2

  00021	eb ec		 jmp	 SHORT $L2$3
$L1$4:

; 68   : 
; 69   : L1:     pop ebp

  00023	5d		 pop	 ebp

; 70   : 		ret

  00024	c3		 ret	 0
?reverse@@YAXPAHH@Z ENDP				; reverse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\phonkx\documents\visual studio 2015\projects\assembler\assembler\main2.cpp
;	COMDAT ?fact@@YAHH@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?fact@@YAHH@Z PROC					; fact, COMDAT

; 20   : 	__asm {
; 21   : 		push ebp

  00000	55		 push	 ebp

; 22   : 		mov ebp, esp

  00001	8b ec		 mov	 ebp, esp

; 23   : 				
; 24   : 		mov eax, [ebp + 8]

  00003	8b 45 08	 mov	 eax, DWORD PTR [ebp+8]

; 25   : 		cmp eax, 1

  00006	83 f8 01	 cmp	 eax, 1

; 26   : 
; 27   : 		jle L1

  00009	7e 0f		 jle	 SHORT $L1$3

; 28   : 		
; 29   : 		dec eax

  0000b	48		 dec	 eax

; 30   : 		push eax

  0000c	50		 push	 eax

; 31   : 		
; 32   : 		call fact

  0000d	e8 00 00 00 00	 call	 ?fact@@YAHH@Z		; fact

; 33   : 		add esp, 4

  00012	83 c4 04	 add	 esp, 4

; 34   : 		
; 35   : 		mul dword ptr [ebp+8]

  00015	f7 65 08	 mul	 DWORD PTR [ebp+8]

; 36   : 		jmp L2

  00018	eb 05		 jmp	 SHORT $L2$4
$L1$3:

; 37   : 	L1:	mov eax, 1

  0001a	b8 01 00 00 00	 mov	 eax, 1
$L2$4:

; 38   : 	L2:	pop ebp

  0001f	5d		 pop	 ebp

; 39   : 		ret

  00020	c3		 ret	 0
?fact@@YAHH@Z ENDP					; fact
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\phonkx\documents\visual studio 2015\projects\assembler\assembler\main2.cpp
;	COMDAT ?f@@YAHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?f@@YAHHH@Z PROC					; f, COMDAT

; 8    : 	__asm {
; 9    : 		push ebp

  00000	55		 push	 ebp

; 10   : 		mov ebp, esp

  00001	8b ec		 mov	 ebp, esp

; 11   : 		mov eax, [ebp + 8]

  00003	8b 45 08	 mov	 eax, DWORD PTR [ebp+8]

; 12   : 		add eax, [ebp + 12]

  00006	03 45 0c	 add	 eax, DWORD PTR [ebp+12]

; 13   : 		pop ebp

  00009	5d		 pop	 ebp

; 14   : 		ret

  0000a	c3		 ret	 0
?f@@YAHHH@Z ENDP					; f
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 605  : 		{	// return end-of-file metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 606  : 		return (EOF);

  0001e	83 c8 ff	 or	 eax, -1

; 607  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 594  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 595  : 		return (_Left == _Right);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00028	75 0c		 jne	 SHORT $LN3@eq_int_typ
  0002a	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  00034	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00036	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00040	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 596  : 		}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\phonkx\documents\visual studio 2015\projects\assembler\assembler\main2.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 110  : }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\phonkx\documents\visual studio 2015\projects\assembler\assembler\main2.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 110  : }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
